Objetivo:

Quitar toda data de testing en la UI (mostrar 0 o “No data” si no hay registros).

Arreglar dark/light toggle (persistente y visible).

Overview: renombrar “HR ACCEPTED” → “Accepted Invitations”, remover “System Health”, Recent = 3 últimas conversaciones (último mensaje), Quick Actions: “Open Chat” → https://chat.incubadoragrowth.com/app/accounts/1/inbox-view y quitar “Test Agents”.

Menú lateral: sacar “Agents & Prompts” e “Integrations”.

useAuth() debe usar /auth/me.

Agregar endpoints reales en el BFF contra Neon: /api/metrics/overview, /api/queue/status, /api/activity/recent-conversations (con COALESCE(...,0)).

1) Backend – agregar endpoints reales en server/index.ts

Inserta antes de crear el server = await registerRoutes(app) o justo después de app.use('/api', requireAuth);. Usa el pool existente.

// === METRICS: /api/metrics/overview ===
// Devuelve 0 si no hay datos; el FE renombra la tarjeta a "Accepted Invitations"
app.get('/api/metrics/overview', async (_req, res) => {
  try {
    const sql = `
    WITH
    hr_accepted AS (
      SELECT count(*) AS c
      FROM public.hr_inbound_seen
      WHERE seen_at >= NOW() - interval '24 hours'
    ),
    active_leads AS (
      SELECT count(DISTINCT user_id) AS c
      FROM public.linkedin_jobs_incubadora
      WHERE status IN ('pending','processing','wait')
        AND (chatwoot_mode = 'ai-on' OR chatwoot_mode IS NULL)
    ),
    qualified_24h AS (
      SELECT count(*) AS c
      FROM public.linkedin_jobs_incubadora
      WHERE updated_at >= NOW() - interval '24 hours'
        AND (
          (result_json->'qualifier_llm'->>'is_task_complete')::bool IS TRUE
          OR lower(conversation_status) LIKE 'qualif%'
        )
    ),
    scheduled_24h AS (
      SELECT count(*) AS c
      FROM public.linkedin_jobs_incubadora
      WHERE updated_at >= NOW() - interval '24 hours'
        AND (
          (result_json->'scheduler_llm'->>'is_task_complete')::bool IS TRUE
          OR lower(conversation_status) LIKE 'schedul%' OR lower(conversation_status) LIKE 'booking%'
        )
    ),
    queue AS (
      SELECT
        sum((status='pending')::int) AS pending,
        sum((status='processing')::int) AS processing
      FROM public.linkedin_jobs_incubadora
    ),
    ai_status AS (
      SELECT
        sum((chatwoot_mode='ai-on')::int) AS ai_on,
        count(*) AS total
      FROM public.linkedin_jobs_incubadora
    ),
    ttfr AS (
      SELECT avg(extract(epoch from (last_human_message_at - last_lead_message_at))) AS seconds
      FROM public.linkedin_jobs_incubadora
      WHERE last_human_message_at IS NOT NULL
        AND last_lead_message_at IS NOT NULL
        AND last_human_message_at >= NOW() - interval '24 hours'
    )
    SELECT
      COALESCE((SELECT c FROM hr_accepted),0)       AS hr_accepted_24h,
      COALESCE((SELECT c FROM active_leads),0)      AS active_leads,
      COALESCE((SELECT c FROM qualified_24h),0)     AS qualified_24h,
      COALESCE((SELECT c FROM scheduled_24h),0)     AS scheduled_24h,
      COALESCE((SELECT pending FROM queue),0)       AS queue_pending,
      COALESCE((SELECT processing FROM queue),0)    AS queue_processing,
      COALESCE((SELECT ai_on FROM ai_status),0)     AS ai_on,
      COALESCE((SELECT total FROM ai_status),0)     AS ai_total,
      COALESCE((SELECT seconds FROM ttfr),0)        AS ttfr_seconds;
    `;
    const { rows } = await pool.query(sql);
    res.json(rows[0]);
  } catch (e: any) {
    res.status(500).json({ error: e.message || 'metrics_failed' });
  }
});

// === QUEUE STATUS: /api/queue/status ===
app.get('/api/queue/status', async (_req, res) => {
  try {
    const { rows } = await pool.query(`
      SELECT status, count(*)::int AS count
      FROM public.linkedin_jobs_incubadora
      GROUP BY status
    `);
    const base: Record<string, number> = { pending: 0, processing: 0, wait: 0, done: 0, failed: 0 };
    for (const r of rows) base[r.status] = r.count;
    res.json(Object.entries(base).map(([status, count]) => ({ status, count })));
  } catch (e: any) {
    res.status(500).json({ error: e.message || 'queue_failed' });
  }
});

// === RECENT CONVERSATIONS: /api/activity/recent-conversations ===
// Últimas 3 conversaciones distintas con su último mensaje detectado en result_json
app.get('/api/activity/recent-conversations', async (_req, res) => {
  try {
    const sql = `
    WITH latest AS (
      SELECT
        id,
        chatwoot_conversation_id,
        updated_at,
        COALESCE(
          NULLIF(result_json->'closer_llm'->>'response_text',''),
          NULLIF(result_json->'scheduler_llm'->>'response_text',''),
          NULLIF(result_json->'objeciones_llm'->>'response_text',''),
          NULLIF(result_json->'follow_up_llm'->>'response_text',''),
          NULLIF(result_json->'qualifier_llm'->>'response_text','')
        ) AS last_message
      FROM public.linkedin_jobs_incubadora
      WHERE chatwoot_conversation_id IS NOT NULL
      ORDER BY updated_at DESC
    )
    SELECT DISTINCT ON (chatwoot_conversation_id)
      chatwoot_conversation_id,
      id AS job_id,
      COALESCE(last_message, 'No hay mensaje registrado') AS last_message,
      updated_at
    FROM latest
    ORDER BY chatwoot_conversation_id, updated_at DESC
    LIMIT 3;
    `;
    const { rows } = await pool.query(sql);
    res.json(rows.map(r => ({
      conversation_id: r.chatwoot_conversation_id,
      job_id: r.job_id,
      last_message: r.last_message,
      at: r.updated_at
    })));
  } catch (e: any) {
    res.status(500).json({ error: e.message || 'recent_failed' });
  }
});


Importante: conserva app.use('/api', requireAuth); (ya está) para que estos endpoints queden protegidos por login.
No elimines server/routes.ts (sigue sirviendo para el resto que depende de n8n).

2) Frontend – Overview con datos reales, y limpieza
2.1 Cambiar Auth del FE a /auth/me

Editar client/src/lib/api.ts:

export const authApi = {
  // antes: getMe: () => api("GET", "/api/me"),
  getMe: () => api("GET", "/auth/me"),
  // el resto igual
};


Editar client/src/components/protected-route.tsx si hace referencia a /api/me directo (usa el hook actual — ya toma de authApi.getMe).

2.2 Arreglar Theme Toggle (persistente y visible)

tailwind.config.ts ya tiene darkMode: 'class' ✅

Asegurar ThemeProvider aplica la clase en <html> (ya lo hace).

En client/src/components/theme-provider.tsx mantener el remove/add de light/dark.

En client/src/components/topbar.tsx el botón ya llama setTheme(theme === "dark" ? "light" : "dark").

Extra: forzar re-aplicación al montar:

useEffect(() => {
  const root = document.documentElement;
  const current = localStorage.getItem('tramia-theme') as 'light'|'dark'|null;
  root.classList.remove('light','dark');
  root.classList.add(current || 'dark');
}, []);


(Esto evita que quede un estado intermedio si venías de “system”).

2.3 Overview sin datos de demo

Editar client/src/pages/overview.tsx:

Eliminar los objetos kpiData, “System Health”, y toda la UI que muestra números hardcodeados (Tokens/Day si también es fake).

Renombrar la tarjeta a "Accepted Invitations" (el valor viene de hr_accepted_24h).

Añadir 3 useEffect/useQuery para:

GET /api/metrics/overview

GET /api/queue/status

GET /api/activity/recent-conversations

Render:

KPIs:

Accepted Invitations = m.hr_accepted_24h

Active Leads = m.active_leads

Qualified (24h) = m.qualified_24h

Scheduled (24h) = m.scheduled_24h

TTFR = (m.ttfr_seconds/60).toFixed(1)+'m'

AI Status % = Math.round((m.ai_on / Math.max(m.ai_total,1))*100)+'%' con hint m.ai_on+"/"+m.ai_total"

Queue Pending / Queue Processing = m.queue_pending / m.queue_processing

Recent Conversations → lista de 3: Conversation #{conversation_id}, last_message, at.

Jobs Queue Status → grid con status/count del endpoint queue.

Donde no haya datos, mostrar “0” o “No data yet.” (usa condicionales simples).

2.4 Quick Actions

En el mismo overview.tsx, reemplazar:

“Open Chatwoot” → “Open Chat” y que sea link:

<a
  href="https://chat.incubadoragrowth.com/app/accounts/1/inbox-view"
  target="_blank" rel="noreferrer"
  className="inline-flex"
>
  <Button className="flex items-center space-x-3 p-4 h-auto">
    <ExternalLink className="h-4 w-4" />
    <span className="font-medium">Open Chat</span>
  </Button>
</a>


Quitar el botón “Test Agents” (y su import TestTubeDiagonal).

2.5 Sidebar – quitar entradas

Editar client/src/components/sidebar.tsx:

En navigationItems, eliminar el objeto { label: "Agents & Prompts", href: "/agents", ... }.

En settingsItems, eliminar el objeto { label: "Integrations", href: "/integrations", ... }.

Eliminar badges fijos en items (ej. "badge: '12'" y "badge: '24'"), o déjalos como opcionales rendereando sólo si vienen de backend (hoy no).

2.6 Recent Activities = últimas 3 conversaciones

En overview.tsx, reemplazar la sección estática por un map de GET /api/activity/recent-conversations (3 items).

Si la lista está vacía, mostrar: No activity yet.

3) Limpieza de datos de testing (opcional)

Si querés borrar todo lo que hay en DB:

Agrega un endpoint admin (si aún no existe) en server/index.ts:

app.post('/admin/wipe-data', (req, res, next) => {
  if (req.headers['x-admin-key'] !== process.env.ADMIN_KEY) return res.sendStatus(403);
  next();
}, async (_req, res) => {
  try {
    await pool.query('BEGIN');
    await pool.query('DELETE FROM public.linkedin_jobs_memory_incubadora');
    await pool.query('DELETE FROM public.hr_inbound_seen');
    await pool.query('DELETE FROM public.linkedin_jobs_incubadora');
    await pool.query('COMMIT');
    res.json({ ok: true });
  } catch (e: any) {
    await pool.query('ROLLBACK');
    res.status(500).json({ error: e.message || 'wipe_failed' });
  }
});


Ejecuta (reemplaza <ADMIN_KEY>):

curl -s -X POST "https://client-dashboard-tramia.replit.app/admin/wipe-data" \
  -H "x-admin-key: <ADMIN_KEY>"


El FE ya mostrará 0 y “No data” donde corresponda.

4) Hardening / calidad recomendada

Errores FE: centralizar fetch en apiRequest (ya está) y mostrar un toast/badge si /api/* responde 500.

SWR: en Overview, revalidar cada 30–60s (refetchInterval) para ver la cola viva.

Índices DB (si no los tienes):

CREATE INDEX IF NOT EXISTS idx_jobs_status   ON public.linkedin_jobs_incubadora(status);
CREATE INDEX IF NOT EXISTS idx_jobs_updated ON public.linkedin_jobs_incubadora(updated_at);
CREATE INDEX IF NOT EXISTS idx_jobs_nextfu  ON public.linkedin_jobs_incubadora(next_follow_up_at);
CREATE INDEX IF NOT EXISTS idx_seen_at      ON public.hr_inbound_seen(seen_at);


Seguridad: ya usás helmet y rate-limit en /auth/login. Suma logs de auditoría en /admin/*.

5) Post-Deploy checklist

Build & Deploy (asegurate que vite build corra y dist/ exista).

Secrets en Deploy (no sólo en workspace):

DATABASE_URL (con sslmode=require)

SESSION_SECRET

ADMIN_KEY

INTERNAL_KEY

N8N_BASE (requerido por server/n8n.ts)

NODE_ENV=production, PORT=5000 (o 3000 si así configuraste)

/login → login OK, cookie sid presente.

/auth/me → 200 y devuelve { email, role }.

Overview:

“Accepted Invitations” muestra 0 si no hay registros.

“System Health” no aparece.

“Recent Conversations” lista máximo 3 (o “No activity yet”).

Quick Actions: Open Chat abre la URL indicada y no está “Test Agents”.